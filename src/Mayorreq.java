
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author shubham
 */
public class Mayorreq extends javax.swing.JFrame {

    /**
     * Creates new form Mayorreq
     */
    Login l;
    Connection conn=null;
    public String text;
    public Mayorreq() {
        l=new Login();
        initComponents();
         try {
            Class.forName("com.mysql.jdbc.Driver");
            String user="root";
            String pass="sayan1994";
            String DB_URL = "jdbc:mysql://"+l.IP_ADD+"/rrts";
            conn = DriverManager.getConnection(DB_URL,user,pass);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(entercom.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(entercom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        requests = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(15, 58, 232));

        title.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(52, 50, 40));
        title.setText("Mayor Requests");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home-32.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(173, 173, 173)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(title))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(64, 177, 239));

        requests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(requests);

        jButton1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(288, 288, 288)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public void showDetails()
    {
         DefaultTableModel mo=(DefaultTableModel)requests.getModel();
            String sql;
            ResultSet rs;
            Statement stmt=null;
        try {
            stmt=conn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Mayorreq.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(text.equals("RWProg"))
            {
               mo.addColumn("Complaint ID");
              
               mo.addColumn("Start Date");
               mo.addColumn("Expected Days");
               sql="SELECT * from work where alloc=1 and end is null";
                try {
                    rs=stmt.executeQuery(sql);
                     while(rs.next())
                     {
                         //System.out.println(rs.getDate("start"));
                         mo.addRow(new Object[]{rs.getInt("comid"),rs.getDate("start"),rs.getInt("days")});
                     }
                } catch (SQLException ex) {
                    Logger.getLogger(Mayorreq.class.getName()).log(Level.SEVERE, null, ex);
                }
               
               
            }
        else if(text.equals("RWComp"))
        {
             mo.addColumn("Complaint ID");
             mo.addColumn("Start Date");
             mo.addColumn("End Date");
             sql="SELECT * from work where alloc=1 and end is not null";
                try {
                    rs=stmt.executeQuery(sql);
                     while(rs.next())
                     {
                         //System.out.println(rs.getDate("start"));
                         mo.addRow(new Object[]{rs.getInt("comid"),rs.getDate("start"),rs.getDate("end")});
                     }
                } catch (SQLException ex) {
                    Logger.getLogger(Mayorreq.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        else if(text.equals("RWPend"))
        {
             mo.addColumn("Complaint ID");
             mo.addColumn("Road ID");
             mo.addColumn("Locality ID");
             sql="SELECT * from complaints where status=0 or status=1";
                try {
                    rs=stmt.executeQuery(sql);
                     while(rs.next())
                     {
                         //System.out.println(rs.getDate("start"));
                         mo.addRow(new Object[]{rs.getInt("comid"),rs.getInt("RoadID"),rs.getInt("LocId")});
                     }
                } catch (SQLException ex) {
                    Logger.getLogger(Mayorreq.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        else if(text.equals("Mstat"))
        {
             mo.addColumn("Resource type");
             mo.addColumn("Total");
             mo.addColumn("Employed");
              mo.addColumn("Unemployed");
             sql="SELECT * from resources";
                try {
                    rs=stmt.executeQuery(sql);
                     while(rs.next())
                     {
                         //System.out.println(rs.getDate("start"));
                         mo.addRow(new Object[]{rs.getString("Type"),rs.getInt("Total"),rs.getInt("Employed"),rs.getInt("Unemployed")});
                     }
                } catch (SQLException ex) {
                    Logger.getLogger(Mayorreq.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
         else if(text.equals("Cominfo"))
        {
             mo.addColumn("Complaint ID");
             mo.addColumn("Road ID");
             mo.addColumn("Locality ID");
             mo.addColumn("Status");
             sql="SELECT * from complaints";
                try {
                    rs=stmt.executeQuery(sql);
                     while(rs.next())
                     {   
                        String status;
                        int st=rs.getInt("status");
                        if(st==1)
                         {
                             status="Reviewed";
                          }
                        else if(st==0)
                        {
                             status="Pending";
                         }
                         else if(st==2)
                         {
                            status="Allocated";
                         }
                         else
                             status="Completed";
                         mo.addRow(new Object[]{rs.getInt("comid"),rs.getInt("RoadID"),rs.getInt("LocId"),status});
                     }
                } catch (SQLException ex) {
                    Logger.getLogger(Mayorreq.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        else
         {
             mo.addColumn("Complaint ID");
              mo.addColumn("Type of work");
              mo.addColumn("Priority");
               mo.addColumn("Start Date");
               mo.addColumn("Expected Days");
               sql="Select * from work";
                try {
                    rs=stmt.executeQuery(sql);
                    while(rs.next())
                    {
                        int t,p;
                        String type,priority;
                        t=rs.getInt("type");
                        p=rs.getInt("priority");
                        if(p==0)
                           priority="Low";
                         else if(p==1)
                             priority="Medium";
                        else
                              priority="High";
                        if(t==0)
                         {
                             type=" Bridge Repair";
                         }
                         else if(t==1)
                          type="Pot Holes Repair";
                         else if(t==2)
                           type="New road building";
                         else if(t==3)
                            type="Speed breaker";
                         else
                            type="FootPath building";
                        mo.addRow(new Object[]{rs.getInt("comid"),type,priority,rs.getDate("start"),rs.getInt("days")});
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Mayorreq.class.getName()).log(Level.SEVERE, null, ex);
                }
               
         }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
           this.setVisible(false);
           new Mayor().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new Mayor().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mayorreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mayorreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mayorreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mayorreq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // System.out.println("HI");
                new Mayorreq().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable requests;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
